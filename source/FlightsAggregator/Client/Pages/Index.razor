@page "/"
@using FlightsAggregator.Shared

<PageTitle>Index</PageTitle>

<h1>Hello, Aggregator!</h1>

<div class="row">
	<div class="col">
		From:
		<select class="form-select" @bind="_model.From">
			@foreach (var airport in Airport.List)
			{
				<option value="@airport.Code">@airport.Name</option>
			}
		</select>
	</div>
	<div class="col">
		To:
		<select class="form-select" @bind="_model.To">
			@foreach (var airport in Airport.List)
			{
				<option value="@airport.Code">@airport.Name</option>
			}
		</select>
	</div>
	<div class="col">
		Date:
		<input class="form-control" @bind="_model.Time" type="date" />
	</div>
	<div class="col">
		<button class="btn btn-primary" @onclick="Search">Search</button>
	</div>
</div>

@if (_loading)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}

@foreach (var searchResult in _searchResult)
{
	@foreach (var item in searchResult.Items)
	{
		<div class="row">
			<div class="col">@item.Airline</div>
			<div class="col">@item.Departure.ToShortTimeString()</div>
			<div class="col">@item.Arrival.ToShortTimeString()</div>
			<div class="col">@searchResult.ProviderName</div>
		</div>
	}
}

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
	private ProviderViewModel[] _providers = Array.Empty<ProviderViewModel>();
	private List<SearchResultViewModel> _searchResult = new List<SearchResultViewModel>();
	private SearchViewModel _model = new SearchViewModel();
	private bool _loading = false;

	[Inject]
	public HttpClient Http { get; set; }

	private async Task Search()
	{
		_loading = true;

		if (_providers.Length == 0)
		{
			_providers = await Http.GetFromJsonAsync<ProviderViewModel[]>("api/Search/get-providers");
		}

		var tasks = new List<Task<SearchResultViewModel>>();
		foreach (var provider in _providers)
		{
			var task = Task.Run(async () =>
			{
				var result = await Http.GetFromJsonAsync<SearchResultViewModel>($"api/Search/get/{provider.Id}/{_model.From}/{_model.To}/{_model.Time.ToString("yyyy-MM-dd")}");

				_searchResult.Add(result);
				StateHasChanged();

				return result;
			});

			tasks.Add(task);
		}

		_searchResult = (await Task.WhenAll(tasks.ToArray())).ToList();

		_loading = false;
	}
}
