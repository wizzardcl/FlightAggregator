@page "/"
@using FlightsAggregator.Shared

<PageTitle>Index</PageTitle>

<h1>Hello, Aggregator!</h1>

<div class="row">
	<div class="col">
		From:
		<select class="form-select" @bind="_model.From">
			@foreach (var airport in Airport.List)
			{
				<option value="@airport.Code">@airport.Name</option>
			}
		</select>
	</div>
	<div class="col">
		To:
		<select class="form-select" @bind="_model.To">
			@foreach (var airport in Airport.List)
			{
				<option value="@airport.Code">@airport.Name</option>
			}
		</select>
	</div>
	<div class="col">
		Date:
		<input class="form-control" @bind="_model.Time" type="date" />
	</div>
	<div class="col">
		<input class="form-check-input" type="checkbox" value="" id="perProviderMode" @bind="_singleCallMode">
		<label class="form-check-label" for="perProviderMode">
			Single Call Mode
		</label>
	</div>
	<div class="col">
		<button class="btn btn-primary" disabled="@_loading" @onclick="Search">Search</button>
	</div>
</div>

@if (_loading)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}

<table class="table">
	<thead>
		<tr>
			<th>
				Airline
			</th>

			<th>
				Departure
			</th>

			<th>
				Arrival
			</th>

			<th>
				Provider Name
			</th>

			<th></th>
		</tr>
	</thead>

	<tbody>
		@foreach (var searchResult in _searchResult)
		{
			@foreach (var item in searchResult.Items)
			{
				<tr>
					<td>@item.Airline</td>
					<td>@item.Departure.ToShortTimeString()</td>
					<td>@item.Arrival.ToShortTimeString()</td>
					<td>@searchResult.ProviderName</td>
					<td><button class="btn btn-primary" @onclick="async () => await Book(searchResult.ProviderId, item.ResultId)">Book</button></td>
				</tr>
			}
		}
	</tbody>
</table>


<SurveyPrompt Title="How is Blazor working for you?" />

@code {
	private ProviderViewModel[] _providers = Array.Empty<ProviderViewModel>();
	private List<SearchResultViewModel> _searchResult = new List<SearchResultViewModel>();
	private SearchViewModel _model = new SearchViewModel { From = Airport.List[0].Code, To = Airport.List[1].Code };
	private bool _loading = false;
	private bool _singleCallMode = true;

	[Inject]
	public HttpClient Http { get; set; }

	private async Task Search()
	{
		_loading = true;
		_searchResult = new List<SearchResultViewModel>();

		if (_singleCallMode)
		{
			var result = await Http.GetFromJsonAsync<SearchResultViewModel[]>($"api/search/get-for/{_model.From}/{_model.To}/{_model.Time.ToString("yyyy-MM-dd")}");

			_searchResult = result.ToList();
		}
		else
		{
			if (_providers.Length == 0)
			{
				_providers = await Http.GetFromJsonAsync<ProviderViewModel[]>("api/search/get-providers");
			}

			var tasks = new List<Task<SearchResultViewModel[]>>();
			foreach (var provider in _providers)
			{
				var task = Task.Run(async () =>
				{
					var result = await Http.GetFromJsonAsync<SearchResultViewModel[]>($"api/search/get-for/{_model.From}/{_model.To}/{_model.Time.ToString("yyyy-MM-dd")}/{provider.Id}");

					_searchResult.AddRange(result);
					StateHasChanged();

					return result;
				});

				tasks.Add(task);
			}

			_searchResult = (await Task.WhenAll(tasks.ToArray())).SelectMany(e => e).ToList();
		}

		_loading = false;
	}

	private async Task Book(Guid providerId, Guid resultId)
	{
		var result = await Http.PostAsJsonAsync("api/search", new BookViewModel { ProviderId = providerId, ResultId = resultId });
	}
}
